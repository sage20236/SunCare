//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SunCare.Models
{
    using System;
    using System.Collections.Generic;

    public partial class Record
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Record()
        {
            this.RecordDetails = new HashSet<RecordDetail>();
        }

        public int RecordID { get; set; }
        public int PatientID { get; set; }
        public int ServiceID { get; set; }
        public System.DateTime CreateTime { get; set; }
        public int EmployeeID { get; set; }

        public virtual Employee Employee { get; set; }
        public virtual Patient Patient { get; set; }
        public virtual ServiceItem ServiceItem { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<RecordDetail> RecordDetails { get; set; }

        public Record clone()
        {



            Record copyRecord = new Record
            {
                RecordID = this.RecordID,
                PatientID = this.PatientID,
                ServiceID = this.ServiceID,
                CreateTime = this.CreateTime,
                EmployeeID = this.EmployeeID
            };

            foreach (RecordDetail eachDetails in this.RecordDetails)
            {
                Question copyQuestion = new Question
                {
                    Type = eachDetails.Question.Type
                };
                RecordDetail newDetails = new RecordDetail
                {
                    AnswerID = eachDetails.AnswerID,
                    QuestionID = eachDetails.QuestionID,
                    TextAnswer = eachDetails.TextAnswer,
                    RecordID = eachDetails.RecordID,
                    Question = copyQuestion
                };

                foreach (RecordDetailsOption eachOption in eachDetails.RecordDetailsOptions)
                {
                    RecordDetailsOption newOption = new RecordDetailsOption
                    {
                        AnswerID = eachOption.AnswerID,
                        OptionID = eachOption.OptionID,
                        RecordDetailsOptionID = eachOption.RecordDetailsOptionID
                    };
                    newDetails.RecordDetailsOptions.Add(newOption);
                }
                copyRecord.RecordDetails.Add(newDetails);
            }





            return copyRecord;

        }
    }
}
